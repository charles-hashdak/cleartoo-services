// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/catalog/catalog.proto

package catalog

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CatalogService service

func NewCatalogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CatalogService service

type CatalogService interface {
	CreateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*CreateProductResponse, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...client.CallOption) (*GetProductsResponse, error)
}

type catalogService struct {
	c    client.Client
	name string
}

func NewCatalogService(name string, c client.Client) CatalogService {
	return &catalogService{
		c:    c,
		name: name,
	}
}

func (c *catalogService) CreateProduct(ctx context.Context, in *Product, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "CatalogService.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...client.CallOption) (*GetProductsResponse, error) {
	req := c.c.NewRequest(c.name, "CatalogService.GetProducts", in)
	out := new(GetProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatalogService service

type CatalogServiceHandler interface {
	CreateProduct(context.Context, *Product, *CreateProductResponse) error
	GetProducts(context.Context, *GetProductsRequest, *GetProductsResponse) error
}

func RegisterCatalogServiceHandler(s server.Server, hdlr CatalogServiceHandler, opts ...server.HandlerOption) error {
	type catalogService interface {
		CreateProduct(ctx context.Context, in *Product, out *CreateProductResponse) error
		GetProducts(ctx context.Context, in *GetProductsRequest, out *GetProductsResponse) error
	}
	type CatalogService struct {
		catalogService
	}
	h := &catalogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CatalogService{h}, opts...))
}

type catalogServiceHandler struct {
	CatalogServiceHandler
}

func (h *catalogServiceHandler) CreateProduct(ctx context.Context, in *Product, out *CreateProductResponse) error {
	return h.CatalogServiceHandler.CreateProduct(ctx, in, out)
}

func (h *catalogServiceHandler) GetProducts(ctx context.Context, in *GetProductsRequest, out *GetProductsResponse) error {
	return h.CatalogServiceHandler.GetProducts(ctx, in, out)
}
