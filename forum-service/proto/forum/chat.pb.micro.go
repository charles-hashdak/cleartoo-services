// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chat/chat.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChatService service

func NewChatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChatService service

type ChatService interface {
	Send(ctx context.Context, in *Chat, opts ...client.CallOption) (*SendResponse, error)
	GetChat(ctx context.Context, in *GetChatRequest, opts ...client.CallOption) (*GetChatResponse, error)
	GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...client.CallOption) (*GetConversationsResponse, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) Send(ctx context.Context, in *Chat, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) GetChat(ctx context.Context, in *GetChatRequest, opts ...client.CallOption) (*GetChatResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.GetChat", in)
	out := new(GetChatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...client.CallOption) (*GetConversationsResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.GetConversations", in)
	out := new(GetConversationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceHandler interface {
	Send(context.Context, *Chat, *SendResponse) error
	GetChat(context.Context, *GetChatRequest, *GetChatResponse) error
	GetConversations(context.Context, *GetConversationsRequest, *GetConversationsResponse) error
}

func RegisterChatServiceHandler(s server.Server, hdlr ChatServiceHandler, opts ...server.HandlerOption) error {
	type chatService interface {
		Send(ctx context.Context, in *Chat, out *SendResponse) error
		GetChat(ctx context.Context, in *GetChatRequest, out *GetChatResponse) error
		GetConversations(ctx context.Context, in *GetConversationsRequest, out *GetConversationsResponse) error
	}
	type ChatService struct {
		chatService
	}
	h := &chatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatService{h}, opts...))
}

type chatServiceHandler struct {
	ChatServiceHandler
}

func (h *chatServiceHandler) Send(ctx context.Context, in *Chat, out *SendResponse) error {
	return h.ChatServiceHandler.Send(ctx, in, out)
}

func (h *chatServiceHandler) GetChat(ctx context.Context, in *GetChatRequest, out *GetChatResponse) error {
	return h.ChatServiceHandler.GetChat(ctx, in, out)
}

func (h *chatServiceHandler) GetConversations(ctx context.Context, in *GetConversationsRequest, out *GetConversationsResponse) error {
	return h.ChatServiceHandler.GetConversations(ctx, in, out)
}
