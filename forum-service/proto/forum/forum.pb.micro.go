// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/forum/forum.proto

package forum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ForumService service

func NewForumServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ForumService service

type ForumService interface {
	SendComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*CommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...client.CallOption) (*GetCommentsResponse, error)
	GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...client.CallOption) (*GetSubjectsResponse, error)
}

type forumService struct {
	c    client.Client
	name string
}

func NewForumService(name string, c client.Client) ForumService {
	return &forumService{
		c:    c,
		name: name,
	}
}

func (c *forumService) SendComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.name, "ForumService.SendComment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumService) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...client.CallOption) (*GetCommentsResponse, error) {
	req := c.c.NewRequest(c.name, "ForumService.GetComments", in)
	out := new(GetCommentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumService) GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...client.CallOption) (*GetSubjectsResponse, error) {
	req := c.c.NewRequest(c.name, "ForumService.GetSubjects", in)
	out := new(GetSubjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForumService service

type ForumServiceHandler interface {
	SendComment(context.Context, *Comment, *CommentResponse) error
	GetComments(context.Context, *GetCommentsRequest, *GetCommentsResponse) error
	GetSubjects(context.Context, *GetSubjectsRequest, *GetSubjectsResponse) error
}

func RegisterForumServiceHandler(s server.Server, hdlr ForumServiceHandler, opts ...server.HandlerOption) error {
	type forumService interface {
		SendComment(ctx context.Context, in *Comment, out *CommentResponse) error
		GetComments(ctx context.Context, in *GetCommentsRequest, out *GetCommentsResponse) error
		GetSubjects(ctx context.Context, in *GetSubjectsRequest, out *GetSubjectsResponse) error
	}
	type ForumService struct {
		forumService
	}
	h := &forumServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ForumService{h}, opts...))
}

type forumServiceHandler struct {
	ForumServiceHandler
}

func (h *forumServiceHandler) SendComment(ctx context.Context, in *Comment, out *CommentResponse) error {
	return h.ForumServiceHandler.SendComment(ctx, in, out)
}

func (h *forumServiceHandler) GetComments(ctx context.Context, in *GetCommentsRequest, out *GetCommentsResponse) error {
	return h.ForumServiceHandler.GetComments(ctx, in, out)
}

func (h *forumServiceHandler) GetSubjects(ctx context.Context, in *GetSubjectsRequest, out *GetSubjectsResponse) error {
	return h.ForumServiceHandler.GetSubjects(ctx, in, out)
}
