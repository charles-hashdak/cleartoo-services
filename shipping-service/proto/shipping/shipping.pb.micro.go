// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/shipping/shipping.proto

package shipping

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShippingService service

func NewShippingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShippingService service

type ShippingService interface {
	CreateAddress(ctx context.Context, in *Address, opts ...client.CallOption) (*CreateAddressResponse, error)
	GetAddresses(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetAddressesResponse, error)
	GetAddress(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Address, error)
	GetCountries(ctx context.Context, in *Request, opts ...client.CallOption) (*GetCountriesResponse, error)
	GetCities(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetCitiesResponse, error)
	GetAddAddressData(ctx context.Context, in *Request, opts ...client.CallOption) (*GetAddAddressDataResponse, error)
}

type shippingService struct {
	c    client.Client
	name string
}

func NewShippingService(name string, c client.Client) ShippingService {
	return &shippingService{
		c:    c,
		name: name,
	}
}

func (c *shippingService) CreateAddress(ctx context.Context, in *Address, opts ...client.CallOption) (*CreateAddressResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.CreateAddress", in)
	out := new(CreateAddressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) GetAddresses(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetAddressesResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetAddresses", in)
	out := new(GetAddressesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) GetAddress(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Address, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetAddress", in)
	out := new(Address)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) GetCountries(ctx context.Context, in *Request, opts ...client.CallOption) (*GetCountriesResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetCountries", in)
	out := new(GetCountriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) GetCities(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetCitiesResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetCities", in)
	out := new(GetCitiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) GetAddAddressData(ctx context.Context, in *Request, opts ...client.CallOption) (*GetAddAddressDataResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetAddAddressData", in)
	out := new(GetAddAddressDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShippingService service

type ShippingServiceHandler interface {
	CreateAddress(context.Context, *Address, *CreateAddressResponse) error
	GetAddresses(context.Context, *GetRequest, *GetAddressesResponse) error
	GetAddress(context.Context, *GetRequest, *Address) error
	GetCountries(context.Context, *Request, *GetCountriesResponse) error
	GetCities(context.Context, *GetRequest, *GetCitiesResponse) error
	GetAddAddressData(context.Context, *Request, *GetAddAddressDataResponse) error
}

func RegisterShippingServiceHandler(s server.Server, hdlr ShippingServiceHandler, opts ...server.HandlerOption) error {
	type shippingService interface {
		CreateAddress(ctx context.Context, in *Address, out *CreateAddressResponse) error
		GetAddresses(ctx context.Context, in *GetRequest, out *GetAddressesResponse) error
		GetAddress(ctx context.Context, in *GetRequest, out *Address) error
		GetCountries(ctx context.Context, in *Request, out *GetCountriesResponse) error
		GetCities(ctx context.Context, in *GetRequest, out *GetCitiesResponse) error
		GetAddAddressData(ctx context.Context, in *Request, out *GetAddAddressDataResponse) error
	}
	type ShippingService struct {
		shippingService
	}
	h := &shippingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShippingService{h}, opts...))
}

type shippingServiceHandler struct {
	ShippingServiceHandler
}

func (h *shippingServiceHandler) CreateAddress(ctx context.Context, in *Address, out *CreateAddressResponse) error {
	return h.ShippingServiceHandler.CreateAddress(ctx, in, out)
}

func (h *shippingServiceHandler) GetAddresses(ctx context.Context, in *GetRequest, out *GetAddressesResponse) error {
	return h.ShippingServiceHandler.GetAddresses(ctx, in, out)
}

func (h *shippingServiceHandler) GetAddress(ctx context.Context, in *GetRequest, out *Address) error {
	return h.ShippingServiceHandler.GetAddress(ctx, in, out)
}

func (h *shippingServiceHandler) GetCountries(ctx context.Context, in *Request, out *GetCountriesResponse) error {
	return h.ShippingServiceHandler.GetCountries(ctx, in, out)
}

func (h *shippingServiceHandler) GetCities(ctx context.Context, in *GetRequest, out *GetCitiesResponse) error {
	return h.ShippingServiceHandler.GetCities(ctx, in, out)
}

func (h *shippingServiceHandler) GetAddAddressData(ctx context.Context, in *Request, out *GetAddAddressDataResponse) error {
	return h.ShippingServiceHandler.GetAddAddressData(ctx, in, out)
}
