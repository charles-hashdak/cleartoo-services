// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cart/cart.proto

package cart

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	CreateCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*AddToCartResponse, error)
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...client.CallOption) (*AddToCartResponse, error)
	DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, opts ...client.CallOption) (*DeleteFromCartResponse, error)
	GetCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	IsInCart(ctx context.Context, in *IsInCartRequest, opts ...client.CallOption) (*IsInCartResponse, error)
	CleanCartsFromProduct(ctx context.Context, in *CleanCartsFromProductRequest, opts ...client.CallOption) (*CleanCartsFromProductResponse, error)
	EmptyCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*DeleteFromCartResponse, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) CreateCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*AddToCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.CreateCart", in)
	out := new(AddToCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...client.CallOption) (*AddToCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.AddToCart", in)
	out := new(AddToCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, opts ...client.CallOption) (*DeleteFromCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.DeleteFromCart", in)
	out := new(DeleteFromCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetCart", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) IsInCart(ctx context.Context, in *IsInCartRequest, opts ...client.CallOption) (*IsInCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.IsInCart", in)
	out := new(IsInCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) CleanCartsFromProduct(ctx context.Context, in *CleanCartsFromProductRequest, opts ...client.CallOption) (*CleanCartsFromProductResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.CleanCartsFromProduct", in)
	out := new(CleanCartsFromProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) EmptyCart(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*DeleteFromCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.EmptyCart", in)
	out := new(DeleteFromCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	CreateCart(context.Context, *GetRequest, *AddToCartResponse) error
	AddToCart(context.Context, *AddToCartRequest, *AddToCartResponse) error
	DeleteFromCart(context.Context, *DeleteFromCartRequest, *DeleteFromCartResponse) error
	GetCart(context.Context, *GetRequest, *GetResponse) error
	IsInCart(context.Context, *IsInCartRequest, *IsInCartResponse) error
	CleanCartsFromProduct(context.Context, *CleanCartsFromProductRequest, *CleanCartsFromProductResponse) error
	EmptyCart(context.Context, *GetRequest, *DeleteFromCartResponse) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		CreateCart(ctx context.Context, in *GetRequest, out *AddToCartResponse) error
		AddToCart(ctx context.Context, in *AddToCartRequest, out *AddToCartResponse) error
		DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, out *DeleteFromCartResponse) error
		GetCart(ctx context.Context, in *GetRequest, out *GetResponse) error
		IsInCart(ctx context.Context, in *IsInCartRequest, out *IsInCartResponse) error
		CleanCartsFromProduct(ctx context.Context, in *CleanCartsFromProductRequest, out *CleanCartsFromProductResponse) error
		EmptyCart(ctx context.Context, in *GetRequest, out *DeleteFromCartResponse) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) CreateCart(ctx context.Context, in *GetRequest, out *AddToCartResponse) error {
	return h.CartServiceHandler.CreateCart(ctx, in, out)
}

func (h *cartServiceHandler) AddToCart(ctx context.Context, in *AddToCartRequest, out *AddToCartResponse) error {
	return h.CartServiceHandler.AddToCart(ctx, in, out)
}

func (h *cartServiceHandler) DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, out *DeleteFromCartResponse) error {
	return h.CartServiceHandler.DeleteFromCart(ctx, in, out)
}

func (h *cartServiceHandler) GetCart(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.CartServiceHandler.GetCart(ctx, in, out)
}

func (h *cartServiceHandler) IsInCart(ctx context.Context, in *IsInCartRequest, out *IsInCartResponse) error {
	return h.CartServiceHandler.IsInCart(ctx, in, out)
}

func (h *cartServiceHandler) CleanCartsFromProduct(ctx context.Context, in *CleanCartsFromProductRequest, out *CleanCartsFromProductResponse) error {
	return h.CartServiceHandler.CleanCartsFromProduct(ctx, in, out)
}

func (h *cartServiceHandler) EmptyCart(ctx context.Context, in *GetRequest, out *DeleteFromCartResponse) error {
	return h.CartServiceHandler.EmptyCart(ctx, in, out)
}
