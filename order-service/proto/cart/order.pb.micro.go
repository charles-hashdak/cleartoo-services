// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package cart

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	Order(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	GetSales(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	GetOrders(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	GetSingleOrder(ctx context.Context, in *GetSingleRequest, opts ...client.CallOption) (*GetSingleResponse, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) Order(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Order", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetSales(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetSales", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetOrders(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetOrders", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetSingleOrder(ctx context.Context, in *GetSingleRequest, opts ...client.CallOption) (*GetSingleResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetSingleOrder", in)
	out := new(GetSingleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	Order(context.Context, *OrderRequest, *OrderResponse) error
	GetSales(context.Context, *GetRequest, *GetResponse) error
	GetOrders(context.Context, *GetRequest, *GetResponse) error
	GetSingleOrder(context.Context, *GetSingleRequest, *GetSingleResponse) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		Order(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		GetSales(ctx context.Context, in *GetRequest, out *GetResponse) error
		GetOrders(ctx context.Context, in *GetRequest, out *GetResponse) error
		GetSingleOrder(ctx context.Context, in *GetSingleRequest, out *GetSingleResponse) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) Order(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.CartServiceHandler.Order(ctx, in, out)
}

func (h *cartServiceHandler) GetSales(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.CartServiceHandler.GetSales(ctx, in, out)
}

func (h *cartServiceHandler) GetOrders(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.CartServiceHandler.GetOrders(ctx, in, out)
}

func (h *cartServiceHandler) GetSingleOrder(ctx context.Context, in *GetSingleRequest, out *GetSingleResponse) error {
	return h.CartServiceHandler.GetSingleOrder(ctx, in, out)
}
